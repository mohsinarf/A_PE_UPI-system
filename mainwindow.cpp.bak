#include "mainwindow.h"
#include "ui_mainwindow.h"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    this->setWindowTitle(QStringLiteral("Full Field Pulse Echo Ultrasonic Propogation Imaging System "));

    //progress bar
    ui->statusBar->addPermanentWidget(ui->progressBar,0);
    ui->progressBar->hide();
    ui->progressBar->setTextVisible(false);
    ui->progressBar->setMinimum(0);
    ui->progressBar->setMaximum(100);

    ui->mainToolBar->hide();

    //ui->menuBar->hide();
    ui->labelMovieDebug->hide();
    //ui->pushButtonSaveMovie->hide();

    //Tabwidget
    this->setCentralWidget(ui->tabWidget);

    ui->tabWidget->removeTab(1); // remove the sub-band tab

    progDataPath = "C:\\FF_PE_UPI_Data";
    //Combo boxes
    LoadComboBoxLists();

    //Isntantiate different controllers
    laser       =  new laserController((structScan *)&scanInfo);
    ldv         = new ldvController((structDaq *)&daqInfo);
    daq         = new daqController((structDaq *)&daqInfo,(structScan *)&scanInfo);

    stage       = new stageController();

    //plots
    qwtPlotOsc = new Plot(ui->widgetOscilloscope,false,"Oscilloscope",(structDaq *)&daqInfo);
    qwtPlotOsc->setObjectName(QStringLiteral("qwtPlotOsc"));
    qwtPlotOsc->setGeometry(QRect(0, 0, 1000, 300));

    qwtPlotResult = new Plot(ui->widgetResultTime,true,NULL,(structDaq *)&daqInfo);
    qwtPlotResult->setObjectName(QStringLiteral("qwtPlotResult"));
    qwtPlotResult->setGeometry(QRect(0, 0, 1300, 190));
    qwtPlotResult->updateGeometry();

    //spects
    qwtSpectrogram = new spectrogram(ui->widgettResultSpect,(structScan *)&scanInfo,0, 0, SPECTBASESIZE+150, SPECTBASESIZE,NULL,1);
    qDebug()<<&scanInfo;
    qwtSpectrogram->setObjectName(QStringLiteral("ResultSpectrogram"));

    qwtSpectrogram2 = new spectrogram(ui->widgettResultSpect,(structScan *)&scanInfo,0, 0, SPECTBASESIZE+150, SPECTBASESIZE,NULL,0);
    qDebug()<<&scanInfo;
    qwtSpectrogram2->setObjectName(QStringLiteral("ScreenShotSpectrogram"));
/*
    for (int i=0;i<NUMOFBANDS;i++)
    {
        int left = 0,top = 0;
        if (i == 1)
        {
            left = SPECTBASESIZE+150+80;
            top = 0;
        }
        if (i == 2)
        {
            left = 0;
            top = SPECTBASESIZE+50;
        }
        QString name = "Subband - " + QString::number(i+1);

        qwtSpectrogramSubband[i] = new spectrogram(ui->widgetSubbandSpect,(structScan *)&scanInfo,
                                                   left,top,SPECTBASESIZE+150,SPECTBASESIZE,name,(i==0)?(NUMOFBANDS-1):0);

        qwtSpectrogramSubband[i]->setObjectName(name);
        connect(ui->dial_intensity_Subband,SIGNAL(valueChanged(int)),qwtSpectrogramSubband[i],SLOT(setIntensity(int)));
    }

    for (int i=0;i<(NUMOFBANDS-1);i++)
        connect(qwtSpectrogramSubband[i],SIGNAL(placeSlave(int,int)),qwtSpectrogramSubband[i+1],SLOT(placeSlaveslot(int,int)));
*/
    dataProc    = new dataProcessor((structDaq *)&daqInfo,(structScan *)&scanInfo, (structResult *) &resultInfo,
                                    qwtSpectrogram,qwtSpectrogram2,progDataPath,qwtSpectrogramSubband,ui->labelMovieDebug);
    //timers
    mainTimer = new QTimer(this);
    connect(mainTimer, SIGNAL(timeout()), this, SLOT(incrSlider()));

    mainTimerSubband = new QTimer(this);
    connect(mainTimerSubband, SIGNAL(timeout()), this, SLOT(incrSliderSubband()));

    //connections

    //laser
    connect(laser,SIGNAL(updateProgressBar_laserControllerSignal(int)),this,SLOT(updateProgressBar_mainwindowSlot(int)));
    connect(laser,SIGNAL(updateStatusBar_laserControllerSignal(QString)),this,SLOT(updateStatusBar_mainwindowSlot(QString)));

    //dataproc Incoming Signals
    //controllers
    connect(this,SIGNAL(postProcessingVtwamRequired()),dataProc,SLOT(postProcessingVtwamRequested()));
    connect(this,SIGNAL(postProcessingFilteringRequired()),dataProc,SLOT(postProcessingFilteringRequested()));
    connect(daq,SIGNAL(scanFinished(int)),dataProc,SLOT(scanFinished(int)));
    connect(daq,SIGNAL(newWfmReadyForCopy(short *,int)),dataProc,SLOT(newWfmCopyToArray_slot(short *,int)));
    connect(qwtSpectrogram,SIGNAL(pointToPlot(int)),dataProc,SLOT(plotResultTime(int)));

    //dataproc Outgoing Signals
    connect(dataProc,SIGNAL(updateProgressBar_dataProcessorSignal(int)),this,SLOT(updateProgressBar_mainwindowSlot(int)));
    connect(dataProc,SIGNAL(updateStatusBar_dataProcessorSignal(QString)),this,SLOT(updateStatusBar_mainwindowSlot(QString)));
    connect(dataProc,SIGNAL(updateResultTimePlot(short *, QString)),qwtPlotResult,SLOT(UpdateCurve(short *, QString)));
    connect(dataProc,SIGNAL(wfmCopyDone_sig(int)),daq,SLOT(wfmCopyDone(int)));

    //gui controls
    connect(ui->pushButtonLoadData,SIGNAL(clicked(bool)),dataProc,SLOT(loadData(bool)));
    connect(ui->pushButtonSaveData,SIGNAL(clicked(bool)),dataProc,SLOT(saveData(bool)));

    connect(ui->groupBoxFilter,SIGNAL(toggled(bool)),dataProc,SLOT(selectDisplayBuffer(bool)));
    connect(ui->groupBoxFilter,SIGNAL(toggled(bool)),ui->groupBoxFilterStep1,SLOT(setChecked(bool)));

    connect(ui->horizontalSliderFrame,SIGNAL(valueChanged(int)),dataProc, SLOT(setframeNum(int)));
    //connect(ui->pushButtonCapture, SIGNAL(clicked()),dataProc,SLOT(saveScreenshot()));
    //connect(ui->pushButtonCapture, SIGNAL(clicked()),ui->dial_intensity_2,SLOT(hide()));
    //connect(ui->pushButtonSaveMovie, SIGNAL(clicked()),dataProc,SLOT(saveMovie()));


    //daq
    connect(daq,SIGNAL(updateProgressBar_daqControllerSignal(int)),this,SLOT(updateProgressBar_mainwindowSlot(int)));
    connect(daq,SIGNAL(updateStatusBar_daqControllerSignal(QString)),this,SLOT(updateStatusBar_mainwindowSlot(QString)));
    connect(daq,SIGNAL(scanFinished(int )),this,SLOT(scanFinished_main()));
    connect(daq,SIGNAL(updatePlotOsci(short*)),qwtPlotOsc,SLOT(UpdateCurve(short*)));

    //navigator
    connect(ui->pushButtonJogzp,SIGNAL(pressed()),stage, SLOT(JogzpStart()));
    connect(ui->pushButtonJogzn,SIGNAL(pressed()),stage, SLOT(JogznStart()));
    connect(ui->pushButtonJogxp,SIGNAL(pressed()),stage, SLOT(JogxpStart()));
    connect(ui->pushButtonJogxn,SIGNAL(pressed()),stage, SLOT(JogxnStart()));
    connect(ui->pushButtonJogzp,SIGNAL(released()),stage, SLOT(JogzpStop()));
    connect(ui->pushButtonJogzn,SIGNAL(released()),stage, SLOT(JogznStop()));
    connect(ui->pushButtonJogxp,SIGNAL(released()),stage, SLOT(JogxpStop()));
    connect(ui->pushButtonJogxn,SIGNAL(released()),stage, SLOT(JogxnStop()));

    connect(ui->pushButtonOrigin,SIGNAL(clicked(bool)),stage, SLOT(originSet()));
    connect(ui->pushButtonServoStop,SIGNAL(pressed()),this, SLOT(Stop()));
    connect(ui->pushButtonServoStop2,SIGNAL(pressed()),this, SLOT(Stop()));
    connect(ui->pushButtonGetpos,SIGNAL(pressed()),stage, SLOT(getPosX()));
    connect(ui->pushButtonGetpos,SIGNAL(pressed()),stage, SLOT(getPosZ()));

    connect(stage,SIGNAL(Xpos(QString)),ui->lcdNumberXpos, SLOT(display(QString)));
    connect(stage,SIGNAL(Zpos(QString)),ui->lcdNumberZpos, SLOT(display(QString)));


    //result tab
    connect(ui->dial_intensity,SIGNAL(valueChanged(int)),qwtSpectrogram,SLOT(setIntensity(int)));
    //connect(ui->horizontalSliderFrame,SIGNAL(valueChanged(int)),ui->labelFrame, SLOT(setNum(int)));
    connect(ui->horizontalSliderFrame,SIGNAL(valueChanged(int)),this, SLOT(setlabelFrame(int)));
    connect(ui->horizontalSliderFrame,SIGNAL(valueChanged(int)),qwtPlotResult, SLOT(updateVertMarker(int)));
    connect(ui->horizontalSliderFrame,SIGNAL(mouseMidButton(bool,int)),this, SLOT(updateVtwamInputs(bool,int)));
    //connect(ui->dial_intensity_2,SIGNAL(valueChanged(int)),qwtSpectrogram2,SLOT(setIntensity(int)));
    ui->dial_intensity_2->hide();
    connect(ui->dial_intensity,SIGNAL(valueChanged(int)),qwtSpectrogram2,SLOT(setIntensity(int)));
    connect(ui->pushButtonPlayPause,SIGNAL(toggled(bool)),this, SLOT(playPauseResult(bool)));
    connect(qwtSpectrogram,SIGNAL(placeSlave(int,int)),qwtSpectrogram2,SLOT(placeSlaveslot(int,int)));

    //subband tab
    connect(ui->horizontalSliderSubband,SIGNAL(valueChanged(int)),dataProc, SLOT(setframeNumSubband(int)));
    connect(ui->horizontalSliderSubband,SIGNAL(valueChanged(int)),ui->labelFrameSubband, SLOT(setNum(int)));
    connect(ui->pushButtonPlayPauseSubband,SIGNAL(toggled(bool)),this, SLOT(playPauseResultSubband(bool)));

    connect(ui->pushButtonCaptureVtwam,SIGNAL(clicked(bool)),dataProc, SLOT(saveScreenshotVtwam()));
    connect(ui->radioButtonLowFreq,SIGNAL(toggled(bool)),this,SLOT(freqModeChanged_slot(bool)));
    connect(ui->radioButtonMidFreq,SIGNAL(toggled(bool)),this,SLOT(freqModeChanged_slot(bool)));
    connect(ui->radioButtonHighFreq,SIGNAL(toggled(bool)),this,SLOT(freqModeChanged_slot(bool)));

    connect(ui->pushButtonSaveSettings,SIGNAL(pressed()),this,SLOT(saveSetting()));
    connect(ui->pushButtonLoadSettings,SIGNAL(pressed()),this,SLOT(loadSetting()));
    connect(ui->checkBoxGreyscale,SIGNAL(toggled(bool)),this->qwtSpectrogram,SLOT(toggleUWPIGreyScale(bool)));
    connect(ui->checkBoxGreyscale,SIGNAL(toggled(bool)),this->qwtSpectrogram2,SLOT(toggleUWPIGreyScale(bool)));

    connect(dataProc,SIGNAL(setStagePosX(uint,bool)),stage,SLOT(setPosX(uint,bool)));
    connect(dataProc,SIGNAL(setStagePosZ(uint,bool)),stage,SLOT(setPosZ(uint,bool)));

    connect(ui->enumMaterials,SIGNAL(currentIndexChanged(int)),this,SLOT(changeDaqFiltCustom()));
    connect(ui->enumThickness,SIGNAL(currentIndexChanged(int)),this,SLOT(changeDaqFiltCustom()));
    connect(ui->enumRef,SIGNAL(currentIndexChanged(int)),this,SLOT(changeDaqFiltRef()));

    InitSettingPars(); // The init settings should be loaded from the last settings used.

    //update the x-axis of the plots
    UpdateSettingsStruct();
    qwtPlotOsc->updateAxisScale();
    qwtPlotResult->updateAxisScale();

    qwtSpectrogram->updateAxisXY();
    //qwtSpectrogram2->updateAxisXY(); // dont call for this it is just a slave
    //qwtSpectrogramSubband[0]->updateAxisXY();
    /*
    for (int i=0;i<NUMOFBANDS;i++)
    {
        if ((i%2)==0) //only call for Master
            qwtSpectrogramSubband[i]->updateAxisXY();
    }
    */

    //daq->Configure(true);

#if ACTUALSYSTEM
    QTimer::singleShot(100,this,SLOT(deviceConnect()));
    //Stop();
    stage->resetMovetoX();
    stage->resetMovetoZ();
    stage->clearErrorReset();
    stage->clearServoStop();
#endif

}

MainWindow::~MainWindow()
{
#if ACTUALSYSTEM
    //Stop();
#endif

    //wait for more than a second shoulkd servo stop can be reset in the stage
    //Sleep(3000);

    delete mainTimer;
    delete mainTimerSubband;
    delete laser;
    delete ldv;
    delete daq;
    delete dataProc;
    delete qwtPlotOsc;
    delete qwtSpectrogram;
    delete ui;
}

void MainWindow::changeDaqFiltRef()
{
    QString imagFileName;
    ui->radioButtonLowFreq->setChecked(false);
    ui->radioButtonMidFreq->setChecked(false);
    ui->radioButtonHighFreq->setChecked(false);

    int index = ui->enumRef->currentIndex();
    switch (index)
    {
        case 0:
        daqInfo.startFreqBandPass = 300;
        daqInfo.stopFreqBandPass  = 1300;
        ui->radioButtonLowFreq->setChecked(true);
        ui->radioButtonMidFreq->setChecked(true);
        break;

        case 2:
        daqInfo.startFreqBandPass = 50;
        daqInfo.stopFreqBandPass  = 200;
        ui->radioButtonMidFreq->setChecked(true);
        ui->radioButtonLowFreq->setChecked(true);
        break;

    default:
        daqInfo.startFreqBandPass = 50;
        daqInfo.stopFreqBandPass  = 200;
        ui->radioButtonMidFreq->setChecked(true);
        ui->radioButtonLowFreq->setChecked(true);



        break;
    }
    imagFileName = "://images/"+ui->enumRef->currentText()+".gif";
    ui->labelRefPic->setPixmap(QPixmap(imagFileName));
    ui->labelRefPic->adjustSize();
    ui->labelRefPic->show();
    ui->labelRefWarning->show();
}

void MainWindow::changeDaqFiltCustom()
{
    ui->labelRefPic->hide();
    ui->labelRefWarning->hide();
    ui->radioButtonLowFreq->setChecked(false);
    ui->radioButtonMidFreq->setChecked(false);
    ui->radioButtonHighFreq->setChecked(false);

    if (ui->enumMaterials->currentText() == "Aluminum")
    {
        ui->enumThickness->setEnabled(1);

        QString thickness;
        float thicknessF;
        thickness = ui->enumThickness->currentText();
        thicknessF = ui->enumThickness->currentText().toFloat();

        if (thickness == "0.5"){
            daqInfo.startFreqBandPass = 3000;
            daqInfo.stopFreqBandPass  = 5800;
        }


        else if (thickness == "1.0"){
        daqInfo.startFreqBandPass = 2850;
        daqInfo.stopFreqBandPass  = 3050;
        }

        else if (thickness == "1.5"){
        daqInfo.startFreqBandPass = 1850;
        daqInfo.stopFreqBandPass  = 3050;
        }

        else if (thickness == "2.0"){
        daqInfo.startFreqBandPass = 1440;
        daqInfo.stopFreqBandPass  = 1700;
        }

        else if (thickness == "2.5"){
        daqInfo.startFreqBandPass = 1050;
        daqInfo.stopFreqBandPass  = 1250;
        }

        else if (thickness == "3.0"){
        daqInfo.startFreqBandPass = 900;
        daqInfo.stopFreqBandPass  = 1200;
        }

        else if (thickness == "4.0"){
        daqInfo.startFreqBandPass = 600;
        daqInfo.stopFreqBandPass  = 900;
        }

        else if (thickness == "5.0"){
        daqInfo.startFreqBandPass = 500;
        daqInfo.stopFreqBandPass  = 700;
        }

        else if (thickness == "6.0"){
        daqInfo.startFreqBandPass = 400;
        daqInfo.stopFreqBandPass  = 600;
        }

        else if (thickness == "8.0"){
        daqInfo.startFreqBandPass = 300;
        daqInfo.stopFreqBandPass  = 500;
        }

        if (thicknessF < 2.0)
        {
            ui->radioButtonLowFreq->setChecked(true);
            ui->radioButtonHighFreq->setChecked(true);
        }
        else
        {
            ui->radioButtonLowFreq->setChecked(true);
            ui->radioButtonMidFreq->setChecked(true);
        }

    }
    else if (ui->enumMaterials->currentText() == "Honeycomb")
    {
        ui->enumThickness->setEnabled(0);
        daqInfo.startFreqBandPass = 50;
        daqInfo.stopFreqBandPass  = 200;

        //makesure to toggle the selection
        ui->radioButtonHighFreq->setChecked(true);
        ui->radioButtonLowFreq->setChecked(true);
    }
}

void MainWindow::saveSetting(bool defaultFile)
{
    QFile myfileout;

    QString captureStoragePath = progDataPath + "\\Setting\\";
    QString captureFileName;

    if (defaultFile)
    {
        captureFileName = "LastSetting.bin";
    }
    else
    {
        QDateTime now = QDateTime::currentDateTime();
        captureFileName = "Setting"+now.toString("ddMMyy_hhmmss")+".bin";
    }

    if( QDir(captureStoragePath).exists() == false)
        QDir().mkpath(captureStoragePath);

    myfileout.setFileName(captureStoragePath+captureFileName);

    if(!myfileout.open(QIODevice::WriteOnly))
    {
        QMessageBox errBox;
        errBox.setText("Could not open file for writing.");
        errBox.exec();
        return;
    }
    QDataStream out(&myfileout);
    out.setByteOrder(QDataStream::LittleEndian);

    //Inspection Settings
    out<<ui->enumMaterials->currentIndex();
    out<<ui->enumThickness->currentIndex();
    out<<ui->enumRef->currentIndex();

    //Scan
    out<<ui->lineEditScanWidth->text();
    out<<ui->lineEditScanHeight->text();
    out<<ui->enumScanInterval->currentIndex();
    out<<ui->enumTotalScans->currentIndex();

    out<<ui->enumPRF->currentIndex();
    out<<ui->enumCurrent->currentIndex();


    //Navigator
    //press the get pos button
    ui->pushButtonGetpos->pressed();
    out<<QString::number(ui->lcdNumberXpos->value());
    out<<QString::number(ui->lcdNumberZpos->value());
/*
    out<<stage->scanStartPosX;
    out<<stage->scanStartPosZ;
*/
    //Data Acquisition
    out<<ui->radioButtonLowFreq->isChecked();
    out<<ui->radioButtonMidFreq->isChecked();
    out<<ui->radioButtonHighFreq->isChecked();

    myfileout.close();

    if (defaultFile == false)
    {
        QMessageBox msgBox(QMessageBox::Information, tr("Scan Setting"),tr("Successfully saved settings in \n")+captureStoragePath+captureFileName, 0, this);
        msgBox.exec();
        return;
    }
}

bool MainWindow::loadSetting(bool defaultFile)
{
    QString FileName;
    QFile myfilein;
    int intTemp;
    float floatTemp;
    bool boolTemp;
    QString stringTemp;

    if (defaultFile)
    {
        FileName = progDataPath + "\\Setting\\LastSetting.bin";
    }
    else
    {
        QFileDialog *fd = new QFileDialog;
        //QTreeView *tree = fd->findChild <QTreeView*>();
        //tree->setRootIsDecorated(true);
        //tree->setItemsExpandable(true);
        fd->setFileMode(QFileDialog::ExistingFile);
        fd->setViewMode(QFileDialog::Detail);
        fd->setDirectory(progDataPath+"\\Setting");
        if (fd->exec())
        {
            FileName = fd->selectedFiles()[0];
            qDebug()<<FileName;
        }
        else
        {
            qDebug()<<"Can't open the Setting file.";
            return false;
        }
    }

    myfilein.setFileName(FileName);

    if(!myfilein.open(QIODevice::ReadOnly))
    {
        //QMessageBox msgBox(QMessageBox::Critical, tr("File Error"),tr("Could'nt open parameter file for data."), 0);
        //msgBox.exec();
        qDebug()<<"Can't open the Setting file.";
        return false;
    }
    QDataStream in(&myfilein);
    in.setByteOrder(QDataStream::LittleEndian);



    //Inspection Settings
    in>>intTemp;
    ui->enumMaterials->setCurrentIndex(intTemp);
    in>>intTemp;
    ui->enumThickness->setCurrentIndex(intTemp);
    in>>intTemp;
    ui->enumRef->setCurrentIndex(intTemp);

    //Scan
    in>>stringTemp;
    ui->lineEditScanWidth->setText(stringTemp);
    in>>stringTemp;
    ui->lineEditScanHeight->setText(stringTemp);
    in>>intTemp;
    ui->enumScanInterval->setCurrentIndex(intTemp);
    in>>intTemp;
    ui->enumTotalScans->setCurrentIndex(intTemp);

    in>>intTemp;
    ui->enumPRF->setCurrentIndex(intTemp);
    in>>intTemp;
    ui->enumCurrent->setCurrentIndex(intTemp);

    //Navigator
    //press the get pos button
    //ui->pushButtonGetpos->pressed();


    in>>stringTemp;
    ui->lineEditXpos->setText(stringTemp);
    in>>stringTemp;
    ui->lineEditZPos->setText(stringTemp);

    /*
    in>>floatTemp;
    ui->lineEditXpos->setText(QString::number(floatTemp/1000));
    in>>floatTemp;
    ui->lineEditZPos->setText(QString::number(floatTemp/1000));
    */

    //Data Acquisition
    in>>boolTemp;
    ui->radioButtonLowFreq->setChecked(boolTemp);
    in>>boolTemp;
    ui->radioButtonMidFreq->setChecked(boolTemp);
    in>>boolTemp;
    ui->radioButtonHighFreq->setChecked(boolTemp);

    myfilein.close();

    if (defaultFile == false)
    {
        QMessageBox msgBox(QMessageBox::Information, tr("Scan Setting"),tr("Successfully loaded settings from \n ")+FileName, 0, this);
        msgBox.exec();
    }
    return true;
}

void MainWindow::setlabelFrame(int frameNumber)
{

    QString microSec = " \xC2\xB5s";
    QString labelString = "0"+microSec;
    if (daqInfo.SamplingFreq != 0)
        labelString = QString::number(((double)frameNumber/daqInfo.SamplingFreq) ,'g',2)+microSec;
    ui->labelFrame->setText(labelString);
}
void MainWindow::deviceConnect()
{
    QString ldvPortName;
    QString laserComPort;
    QList<QSerialPortInfo> serialPortInfo = QSerialPortInfo::availablePorts();
    int comPortNum;
    if ((comPortNum = serialPortInfo.size()) > 3)
    {
        QMessageBox msgBox(QMessageBox::Critical, tr("Connection Error"),tr("More than expected COM ports. Please only connect LDV and laser controller."), 0, this);
        msgBox.exec();
        return;
    }

    if (laser->srchPortandConnect("COM5",&laserComPort) == true)
    {
        foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts())
        {
            if (info.portName() != "COM1" && info.portName() != laserComPort )
            {
                ldvPortName = info.portName();
                if (ldv->connect(ldvPortName) == false)
                {//make an error
                    QMessageBox msgBox(QMessageBox::Critical, tr("Connection Error"),tr("LDV not found. Please reconnect and try again."), 0, this);
                    msgBox.exec();
                    return;
                }
                else
                {
                    return;
                }
            }
        }
    }
    else
    {
        QMessageBox msgBox(QMessageBox::Critical, tr("Connection Error"),tr("Laser Controller not found. Please reconnect and try again."), 0, this);
        msgBox.exec();
        if (ldv->connect("COM3") == false)
        {
            QMessageBox msgBox(QMessageBox::Critical, tr("Connection Error"),tr("LDV not found.Please reconnect and try again."), 0, this);
            msgBox.exec();
        }
        return;
    }
}

void MainWindow::updateStatusBar_mainwindowSlot(QString StatusTip)
{
    ui->statusBar->showMessage(StatusTip);
}

void MainWindow::updateProgressBar_mainwindowSlot(int Progress)
{
    ui->progressBar->show();
    ui->progressBar->setValue(Progress);
    if (Progress == 100)
    {
        QTimer::singleShot( 500, this, SLOT(endProgressBar_mainwindowSlot() ));
    }
}

void MainWindow::endProgressBar_mainwindowSlot()
{
    ui->progressBar->hide();
}

void MainWindow::LoadComboBoxLists()
{
    QStringList listScanInterval,listLaserPRF,listLaserCurrent,listPlaySpeed,listMaterials,
            listThickness,listTotalScans,listRef;
    //scan
    ui->enumScanInterval->addItems(comboScanInterval(listScanInterval));
    //laser
    ui->enumPRF->addItems(comboLaserPRF(listLaserPRF));
    ui->enumCurrent->addItems(comboLaserCurrent(listLaserCurrent));


    ui->enumPlaySpeed->addItems(comboPlaySpeed(listPlaySpeed));

    ui->enumImageFilterIterations->addItem("1");
    ui->enumImageFilterIterations->addItem("2");

    ui->enumImageFilterType->addItem("Median");
    ui->enumImageFilterType->addItem("Spatial Avg");

    ui->enumImageFilterSize->addItem("3x3");
    ui->enumImageFilterSize->addItem("5x5");
    ui->enumImageFilterSize->addItem("7x7");

    ui->enumImageFilterIterations_2->addItem("1");
    ui->enumImageFilterIterations_2->addItem("2");

    ui->enumImageFilterType_2->addItem("Median");
    ui->enumImageFilterType_2->addItem("Spatial Avg");

    ui->enumImageFilterSize_2->addItem("3x3");
    ui->enumImageFilterSize_2->addItem("5x5");
    ui->enumImageFilterSize_2->addItem("7x7");

    ui->enumPlaySpeedSubband->addItems(comboPlaySpeed(listPlaySpeed));

    ui->enumMaterials->addItems(comboMaterials(listMaterials));
    ui->enumThickness->addItems(comboThickness(listThickness));
    ui->enumRef->addItems(comboRef(listRef));

    ui->enumTotalScans->addItems(comboTotalScans(listTotalScans));
}

void MainWindow::InitSettingPars()
{
    //laser
    if (loadSetting(true)==false)
    { //file for the last setting does not exist so set to default initial values
        ui->enumPRF->setCurrentIndex(6);
        ui->enumCurrent->setCurrentIndex(14);
        ui->lineEditScanWidth->setText("50");
        ui->lineEditScanHeight->setText("50");
        ui->enumScanInterval->setCurrentIndex(2);
    }

    ui->labelLaserStatus->setText("Laser Beam: OFF");
    ui->pushButtonLaserControl->setEnabled(false);
    ui->pushButtonLaserControl->setText("Activate");
    ui->pushButtonLaserControl->setStatusTip("Turn-on the laser beam.");

    ui->dial_intensity_2->setMinimum(1000);
    ui->dial_intensity_2->setMaximum((1<<20)-1);
    ui->dial_intensity_2->setValue(140000);

    ui->dial_intensity->setMinimum(1000);
    ui->dial_intensity->setMaximum((1<<15)-1);
    ui->dial_intensity->setValue(2000);

    ui->horizontalSliderFrame->setMinimum(0);
    ui->horizontalSliderFrame->setMaximum(SAMPLESPERPOINT-1);
    ui->horizontalSliderFrame->setValue(0);

    ui->enumPlaySpeed->setCurrentIndex(1);

    ui->groupBoxFilter->setChecked(false);
    ui->lineEditVtwamStart->setText("0");
    ui->lineEditVtwamEnd->setText("0");

    ui->dial_intensity_Subband->setMinimum(1000);
    ui->dial_intensity_Subband->setMaximum(32768);
    ui->dial_intensity_Subband->setValue(16384);

    ui->horizontalSliderSubband->setMinimum(0);
    ui->horizontalSliderSubband->setMaximum(SAMPLESPERPOINT-1);
    ui->horizontalSliderSubband->setValue(0);

    ui->enumPlaySpeedSubband->setCurrentIndex(1);
    //make sure to toggle to hit the toggle slot
    ui->radioButtonLowFreq->setChecked(true);
    ui->radioButtonHighFreq->setChecked(false);
    //ui->groupBoxFilter->setChecked(true);

    ui->groupBoxFilterStep1->setChecked(false);
    ui->groupBoxFilterStep2->setChecked(false);

    QPalette* palRedText = new QPalette();
    palRedText->setColor(QPalette::ButtonText, Qt::red);

    ui->pushButtonServoStop->setPalette(*palRedText);
    ui->pushButtonServoStop2->setPalette(*palRedText);

    ui->pushButtonDaqSet->setEnabled(true);

    ui->enumMaterials->setCurrentIndex(1);

    UpdateSettingsStruct();
}

void MainWindow::updateResultParStruct()
{
    resultInfo.filtPass1en          = ui->groupBoxFilterStep1->isChecked();
    resultInfo.filterType           = ui->enumImageFilterType->currentIndex()+1;
    resultInfo.filterRadius         = ui->enumImageFilterSize->currentIndex()+1;
    resultInfo.filterItr            = ui->enumImageFilterIterations->currentIndex()+1;

    resultInfo.filtPass2en             = ui->groupBoxFilterStep2->isChecked();
    resultInfo.filterType2           = ui->enumImageFilterType_2->currentIndex()+1;
    resultInfo.filterRadius2         = ui->enumImageFilterSize_2->currentIndex()+1;
    resultInfo.filterItr2            = ui->enumImageFilterIterations_2->currentIndex()+1;

    resultInfo.vtwamStartFr          = ui->lineEditVtwamStart->text().toInt();
    resultInfo.vtwamEndFr            = ui->lineEditVtwamEnd->text().toInt();
}

void MainWindow::UpdateScanParStruct()
{
    scanInfo.scanHeight         = ui->lineEditScanHeight->text().toInt();
    scanInfo.scanWidth          = ui->lineEditScanWidth->text().toInt();
    scanInfo.scanInterval       = ui->enumScanInterval->currentText().toFloat();
    scanInfo.Current            = ui->enumCurrent->currentText();
    scanInfo.PRF                = ui->enumPRF->currentText();
    scanInfo.scansPerInspection = ui->enumTotalScans->currentText().toInt();
    scanInfo.useCurrentResults  = ui->checkBox_useCurrentResults->isChecked();
}

void MainWindow::UpdateDaqParStruct()
{
    bool LowFreqEn =  ui->radioButtonLowFreq->isChecked();

    if (ui->radioButtonLowFreq->isChecked())
    {
        daqInfo.freqMode = 0;
        daqInfo.SamplingFreq = 10;
        daqInfo.Range = 5;
    }
    else if (ui->radioButtonMidFreq->isChecked())
    {
        daqInfo.freqMode = 1;
        daqInfo.SamplingFreq = 60;
        daqInfo.Range = 20;
    }
    else if (ui->radioButtonHighFreq->isChecked())
    {
        daqInfo.freqMode = 2;
        daqInfo.SamplingFreq = 60;
        daqInfo.Range = 20;
    }

    daqInfo.ScanPoints              = ((scanInfo.scanHeight/scanInfo.scanInterval)+1)*((scanInfo.scanWidth/scanInfo.scanInterval)+1);
    //daqInfo.subbandDecomp         = (!LowFreqEn);
    daqInfo.subbandDecomp           = false;
    daqInfo.ButterWorthIIREnabled   = true;
    daqInfo.totalNumOfScans         = (ui->enumTotalScans->currentText()).toInt();
}

void MainWindow::UpdateSettingsStruct()
{
    UpdateScanParStruct();
    UpdateDaqParStruct();
}


void MainWindow::on_pushButtonLaserControl_toggled(bool checked)
{
    if (checked)
    {
        //ui->statusBar->showMessage("Activating Laser.");
        if(laser->onSHT())
        {
            ui->pushButtonLaserControl->setText("Deactivate");
            ui->labelLaserStatus->setText("Laser Beam: ON");
            ui->pushButtonLaserControl->setStatusTip("Deactivate the laser beam.");
        }
        else
        {
            laserError();
        }
    }
    else
    {
        //ui->statusBar->showMessage("Deactivating Laser.");
        if(laser->offSHT() )
        {
            ui->labelLaserStatus->setText("Laser Beam: OFF");
            ui->pushButtonLaserControl->setText("Activate");
            ui->pushButtonLaserControl->setStatusTip("Activate the laser beam.");
        }
        else
        {
            laserError();
        }
    }
}

void MainWindow::on_pushButtonLaserConfigPrfCurr_clicked()
{
    UpdateScanParStruct();
    if (laser->initLaserControllerDone == false)
    {// if init was not done then paras will be set as part of init.
        ui->statusBar->showMessage("Initializing the laser and setting parameters.");
        if(laser->initLaserController() == false)
        {
            laserError();
        }
        else
        {
            ui->statusBar->showMessage("Laser has been configured.");
            ui->pushButtonLaserControl->setEnabled(true);
        }
    }
    else
    {//set current and PRF separately.
        ui->statusBar->showMessage("Setting laser parameters.");
        if(!( laser->setPRF() && laser->setCurrent() ))
        {
            laserError();
        }
        else
        {
            ui->statusBar->showMessage("Laser has been configured.");
            ui->pushButtonLaserControl->setEnabled(true);
        }
    }
}

void MainWindow::laserError()
{
    QMessageBox msgBox(QMessageBox::Critical, tr("Connection Error"),tr("Laser controller not found.Please reconnect and try again."), 0, this);
    msgBox.exec();

    //The laser may have been turned off so make sure to initialize again next time.
    laser->initLaserControllerDone = true;
    ui->pushButtonLaserControl->setEnabled(false);

    ui->labelLaserStatus->setText("Laser Beam: OFF");
    ui->pushButtonLaserControl->setText("Activate");
    ui->pushButtonLaserControl->setStatusTip("Activate the laser beam.");
}

void MainWindow::on_pushButtonLdvAutoFocus_clicked()
{
    if ( ! (ldv->setAutoFocus()) )
    {
        QMessageBox msgBox(QMessageBox::Critical, tr("Connection Error"),tr("LDV not found.Please reconnect and try again."), 0, this);
        msgBox.exec();
    }
    else
    {
        ui->statusBar->showMessage("Ldv has been configured.");
    }
}

void MainWindow::setLdvRange()
{
    if ( !(ldv->setRange()) )
    {
        QMessageBox msgBox(QMessageBox::Critical, tr("Connection Error"),tr("LDV not found.Please reconnect and try again."), 0, this);
        msgBox.exec();
    }
    else
    {
        ui->statusBar->showMessage("Ldv has been configured.");
    }
}

void MainWindow::on_lineEditScanHeight_editingFinished()
{
    ui->lineEditScanHeight->setText(QString::number(boundScanPars(ui->lineEditScanHeight->text().toInt())));
}

int MainWindow::boundScanPars(int enteredPar)
{
    int validPar;

    if(enteredPar >= 5)
    {
        if(enteredPar <= 500)
        {
            if (enteredPar%10 == 0)
                validPar = enteredPar;
            else
                validPar = (10-enteredPar%10) +  enteredPar;
        }
        else
           validPar = 500;
    }
    else
        validPar = 5;

    return validPar;
    //return validPar =enteredPar;
}

void MainWindow::on_lineEditScanWidth_editingFinished()
{
    ui->lineEditScanWidth->setText(QString::number(boundScanPars(ui->lineEditScanWidth->text().toInt())));
}


void MainWindow::on_pushButtonSetpos_released()
{
    stage->setPosX(ui->lineEditXpos->text().toDouble()*1000);
    stage->setPosZ(ui->lineEditZPos->text().toDouble()*1000);
}

void MainWindow::on_lineEditXpos_editingFinished()
{
    double val;
    val = ui->lineEditXpos->text().toDouble();
    ui->lineEditXpos->setText(QString::number(val,'f',2));
}

void MainWindow::on_lineEditZPos_editingFinished()
{
    double val;
    val = ui->lineEditZPos->text().toDouble();
    ui->lineEditZPos->setText(QString::number(val,'f',2));
}

void MainWindow::freqModeChanged_slot(bool checked)
{
    //get rid of duplicate call originating from cleared radio button
    if (checked == true)
    {
        UpdateSettingsStruct();
        qwtPlotOsc->updateAxisScale();
        qwtPlotResult->updateAxisScale();
    /*
        if (checked == true) //10Mhz
            ui->tabWidget->removeTab(1); // remove the sub-band tab
        else    //60Mhz
            ui->tabWidget->insertTab(1,ui->Subbandtab,"Sub-band decomposition");
    */
       daq->Configure(true);//reconfigure DAQ in oscilo mode.
       ldv->setRange();

       ui->labelBPRange->setText("Bandpass filter: " + QString::number(daqInfo.startFreqBandPass)+"KHz ~ " + QString::number(daqInfo.stopFreqBandPass) + "KHz");
    }
}

void MainWindow::on_pushButtonInit_clicked()
{
    //stage->originSet();
    on_pushButtonLdvAutoFocus_clicked();
    ui->statusBar->showMessage("Initializing the laser and setting parameters.");
    if(laser->initLaserController() == false)
    {
        laserError();
        return;
    }
    else
    {
        ui->statusBar->showMessage("Laser has been configured.");
        ui->pushButtonLaserControl->setEnabled(true);
    }
    ldv->setRange();
    //on_pushButtonLaserConfigPrfCurr_clicked(); // this will automatically initilize the laser if not done so far.

    ui->pushButtonDaqSet->setEnabled(true);
    QTimer::singleShot(6500, this, SLOT(initDoneMsgBox()));

}

void MainWindow::initDoneMsgBox()
{
    QMessageBox msgBox(QMessageBox::Information, tr("Scan initialization"),tr("Scan initialization done."), 0, this);
    msgBox.exec();
}

void MainWindow::on_pushButtonLdvAutoFocus_2_clicked()
{
    UpdateSettingsStruct();
    stage->markScanArea((unsigned int)scanInfo.scanHeight,(unsigned int)scanInfo.scanWidth,(float)scanInfo.scanInterval);
}
void MainWindow::Stop()
{
    stopPressed = true;
    stage->setServoStop();
    if (daq->OsciModeEn==false)
        daq->StopAcquisition();
    dataProc->stop();

    on_pushButtonLaserControl_toggled(false);//turn on SHT
    laser->offEXT();

    connect(dataProc,SIGNAL(setStagePosX(uint,bool)),stage,SLOT(setPosX(uint,bool)));
    connect(dataProc,SIGNAL(setStagePosZ(uint,bool)),stage,SLOT(setPosZ(uint,bool)));
    //daq->Configure(true);//goto oscilo mode
}

void MainWindow::on_pushButtonDaqSet_clicked()
{
    if (ui->checkBox_useCurrentResults->isChecked())
    {//load all the pars of last scan from file to make sure these settings are all same

    }
    qDebug()<<"\nMainWindow::on_pushButtonDaqSet_clicked *******Starting a new inspection********";
    on_lineEditScanHeight_editingFinished();
    on_lineEditScanWidth_editingFinished();
    UpdateSettingsStruct();
    scansDone = 0;
    stopPressed = false;
    on_pushButtonCapture_clicked();
    if(dataProc->allocateMem())
    {
        saveSetting(true);
#if ACTUALSYSTEM

        disconnect(dataProc,SIGNAL(setStagePosX(uint,bool)),stage,SLOT(setPosX(uint,bool)));
        disconnect(dataProc,SIGNAL(setStagePosZ(uint,bool)),stage,SLOT(setPosZ(uint,bool)));

        laser->onEXT();
        daq->Configure(false);
        ldv->setRange();
        on_pushButtonLaserControl_toggled(true);//turn on SHT
        stage->startScan((unsigned int)scanInfo.scanHeight,
                         (unsigned int)scanInfo.scanWidth,
                         (unsigned int )scanInfo.PRF.toUInt(),
                         (float)scanInfo.scanInterval);
        ui->tabWidget->setCurrentIndex(1);
#else
        daq->Configure(false);
        /*
       //dataProc->scanFinished(100);
       emit daq->scanFinished(0);
       //dataProc->setframeNum(0);
       */
#endif
    }
    else
    {
        QMessageBox msgBox(QMessageBox::Critical, tr("Error: Out Of Memory"),tr("Reduce the number of scan points and try again."), 0, this);
        msgBox.exec();
    }
}

void MainWindow::scanFinished_main()
{
    qDebug()<<"MainWindow::scanFinished_main *******Scan finished********\n";
    //go to start position again
    //laser->offSHT();
    ui->checkBox_useCurrentResults->setEnabled(true);
    scansDone++;
#if ACTUALSYSTEM
    on_pushButtonLaserControl_toggled(false);//turn on SHT
    laser->offEXT();  
#endif

    if (scanInfo.scansPerInspection == 1)
        daq->Configure(true);//goto oscilo mode

    // more scans needed
     if (scanInfo.scansPerInspection > 1 && stopPressed == false )
     {
         if (scansDone < scanInfo.scansPerInspection)
         {
             qDebug()<<"MainWindow::on_pushButtonDaqSet_clicked *******Starting a new scan. scansDone:"<<scansDone<<
                       "scanInfo.scansPerInspection"<<scanInfo.scansPerInspection;
             //issue another scan
             //wait for 5 seconds in between the respective scans to allow for stage to return to original position
             /*
             {
                 QElapsedTimer timer;
                 timer.start();
                 while(timer.elapsed()<15000)
                     QCoreApplication::processEvents();
            }*/

             while(stage->isReadyForRptScan() == false)
                 QCoreApplication::processEvents();

            #if ACTUALSYSTEM
                    laser->onEXT();
                    daq->Configure(false);
                    ldv->setRange();
                    on_pushButtonLaserControl_toggled(true);//turn on SHT
                    stage->startScan((unsigned int)scanInfo.scanHeight,
                                     (unsigned int)scanInfo.scanWidth,
                                     (unsigned int )scanInfo.PRF.toUInt(),
                                     (float)scanInfo.scanInterval,
                                     false);
                    ui->tabWidget->setCurrentIndex(1);
            #else
                    //emit daq->scanFinished(0);

                    daq->Configure(false);
            #endif

         }
         else
         {
             // trigger rpt scan finished in data processor.
             dataProc->rptScanFinished();
             daq->Configure(true);//goto oscilo mode
             connect(dataProc,SIGNAL(setStagePosX(uint,bool)),stage,SLOT(setPosX(uint,bool)));
             connect(dataProc,SIGNAL(setStagePosZ(uint,bool)),stage,SLOT(setPosZ(uint,bool)));
         }
     }
     else if (scanInfo.useCurrentResults)
     {
         dataProc->rptScanFinished();
         daq->Configure(true);//goto oscilo mode
         connect(dataProc,SIGNAL(setStagePosX(uint,bool)),stage,SLOT(setPosX(uint,bool)));
         connect(dataProc,SIGNAL(setStagePosZ(uint,bool)),stage,SLOT(setPosZ(uint,bool)));
     }
     else
     {
         connect(dataProc,SIGNAL(setStagePosX(uint,bool)),stage,SLOT(setPosX(uint,bool)));
         connect(dataProc,SIGNAL(setStagePosZ(uint,bool)),stage,SLOT(setPosZ(uint,bool)));
     }


}

void MainWindow::on_pushButtonQuit_clicked()
{
    int result;
    QMessageBox msgBox(QMessageBox::Question, tr("Exit"),tr("Do you want to end this session ?"),
                       QMessageBox::Yes|QMessageBox::No);
    result = msgBox.exec();

    if (result ==QMessageBox::No)
    return;

    qDebug()<<"Now turnoff everything.";

#ifdef ACTUAL_SYSTEM
    //1-stop the stage.
    Stop();

    //2-take stage to desired position.
    stage->setPosX(250000);
    stage->setPosZ(500000);

    //3-set laser all off.
    laser->offDIO();
    laser->offQSW();
#endif

    QCoreApplication::quit();
}

//-------------------------------------------------Result tab----------------------------------------
#define SPEEDX1INTERVALMS 100
//Spectrogram takes 23~25ms to render. Using fastes 30ms per update to give breathing room to worker threads
//x1->100ms+10ms(overhead)
//x2->50+10ms(overhead)
//x4->25+10ms(overhead)
//anything beyond this will just choke up the timer thread Q since the processing is bottlenecked by the spectrogram update
void MainWindow::playPauseResult(bool play)
{
    sliderIncVal = 1;
    if (play)
    {
       incrSlider();
       if (ui->enumPlaySpeed->currentIndex()<4) // only speed up till X4
       {
           mainTimer->start(SPEEDX1INTERVALMS /(1 << ui->enumPlaySpeed->currentIndex()) );
           sliderIncVal = 1;
       }
       else
       {
           mainTimer->start(SPEEDX1INTERVALMS/4 );
           sliderIncVal = ui->enumPlaySpeed->currentIndex() - 3;
       }


       ui->pushButtonPlayPause->setText("Pause");
       ui->pushButtonPlayPause->setStatusTip("Pause the automatic display of data.");
       ui->pushButtonPlayPause->setChecked(true);
    }
    else
    {
        mainTimer->stop();
        ui->pushButtonPlayPause->setText("Play");
        ui->pushButtonPlayPause->setChecked(false);
        ui->pushButtonPlayPause->setStatusTip("Automatically traverse the data in a frame-wise fashion. ");
    }
}

void MainWindow::incrSlider()
{
    int curVal = ui->horizontalSliderFrame->value();
    curVal += sliderIncVal;
    if (curVal >= SAMPLESPERPOINT)
    {
        //playPauseResult(false);
        curVal = 0;
    }

    ui->horizontalSliderFrame->setValue(curVal);
    /*
    {
        static QElapsedTimer t;
        qDebug()<<"incrSlider: curVal" << curVal <<"sliderIncVal"<<sliderIncVal: <<"Inter increment time: "<<t.elapsed();
        t.start();
    }
    */
}

void MainWindow::on_enumPlaySpeed_currentIndexChanged(int index)
{
    if(ui->pushButtonPlayPause->isChecked()== TRUE)
    {

        playPauseResult(false);
        playPauseResult(true);
/*
        mainTimer->stop();

        mainTimer->start(100/(1 << index ));
*/
    }
}

void MainWindow::on_groupBoxFilterStep1_toggled(bool arg1)
{
    if (arg1==false)
        ui->groupBoxFilterStep1->setChecked(false);//must always have a step 1`
}

void MainWindow::on_groupBoxFilterStep2_toggled(bool arg1)
{
    if (arg1==true)
        ui->groupBoxFilterStep1->setChecked(true);//must always have a step 1`
}

void MainWindow::on_pushButtonProcessFilter_clicked()
{
    //ui->pushButton->setEnabled(false);
    this->updateResultParStruct();
    emit postProcessingFilteringRequired();
}


void MainWindow::on_pushButtonCapture_clicked()
{
    connect(ui->dial_intensity,SIGNAL(valueChanged(int)),qwtSpectrogram2,SLOT(setIntensity(int)));
    disconnect(ui->dial_intensity_2,SIGNAL(valueChanged(int)),qwtSpectrogram2,SLOT(setIntensity(int)));
    ui->dial_intensity_2->hide();
    emit ui->dial_intensity->valueChanged(ui->dial_intensity->value()+1);
    emit ui->dial_intensity->valueChanged(ui->dial_intensity->value()-1);
    dataProc->saveScreenshot();
}

void MainWindow::on_pushButtonProcessVtwam_clicked()
{
   this->updateResultParStruct();
   //show the second knob and allocate proper scale
   disconnect(ui->dial_intensity,SIGNAL(valueChanged(int)),qwtSpectrogram2,SLOT(setIntensity(int)));
   connect(ui->dial_intensity_2,SIGNAL(valueChanged(int)),qwtSpectrogram2,SLOT(setIntensity(int)));
   ui->dial_intensity_2->show();
   emit ui->dial_intensity_2->valueChanged(ui->dial_intensity_2->value()+1);
   emit ui->dial_intensity_2->valueChanged(ui->dial_intensity_2->value()-1);
   emit postProcessingVtwamRequired();
}

void MainWindow::updateVtwamInputs(bool press, int value)
{
    if (press)
    {
        ui->lineEditVtwamStart->setText(QString::number(value));
    }
    else
    {
        ui->lineEditVtwamEnd->setText(QString::number(value));

    }
}
//-------------------------------------------------Subband tab----------------------------------------

void MainWindow::playPauseResultSubband(bool play)
{
    if (play)
    {
       incrSliderSubband();
       mainTimerSubband->start(50 /(1 << ui->enumPlaySpeed->currentIndex()) );
       ui->pushButtonPlayPauseSubband->setText("Pause");
       ui->pushButtonPlayPauseSubband->setStatusTip("Pause the automatic display of data.");
       ui->pushButtonPlayPauseSubband->setChecked(true);
    }
    else
    {
        mainTimerSubband->stop();
        ui->pushButtonPlayPauseSubband->setText("Play");
        ui->pushButtonPlayPauseSubband->setChecked(false);
        ui->pushButtonPlayPauseSubband->setStatusTip("Automatically traverse the data in a frame-wise fashion. ");
    }
}

void MainWindow::incrSliderSubband()
{
    int curVal = ui->horizontalSliderSubband->value();
    ui->horizontalSliderSubband->setValue(++curVal);
    if (curVal == SAMPLESPERPOINT)
        playPauseResultSubband(false);
}

void MainWindow::on_enumPlaySpeedSubband_currentIndexChanged(int index)
{
    if(ui->pushButtonPlayPauseSubband->isChecked()== TRUE)
    {
        mainTimerSubband->stop();
        mainTimerSubband->start(50/(1 << index ));
    }
}

void MainWindow::on_radioButtonSubband1_toggled(bool checked)
{
    dataProc->chooseSubband(0);
}

void MainWindow::on_radioButtonSubband2_toggled(bool checked)
{
    dataProc->chooseSubband(1);
}

void MainWindow::on_radioButtonSubband3_toggled(bool checked)
{
    dataProc->chooseSubband(2);
}

MySlider::MySlider(QWidget *parent):
QSlider(parent)
{
/* // line beneath the scaleDraw
    line = new QFrame(this);
    line->setFrameShape(QFrame::HLine);
    line->setFrameShadow(QFrame::Raised);
    line->setVisible(false); //not working
*/
}

void MySlider::mousePressEvent ( QMouseEvent * event )
{
    if (event->button() == Qt::MiddleButton)
    {
        qDebug()<<"middle button pressed"<<event->pos().x()<<event->pos().y();
        xAtpress = event->pos().x();

        emit mouseMidButton(1,this->value());
    }
  QSlider::mousePressEvent(event);

}
void MySlider::mouseReleaseEvent ( QMouseEvent * event )
{
    if (event->button() == Qt::MiddleButton)
    {
        qDebug()<<"middle button released"<<event->pos().x()<<event->pos().y();
/*
        //line->setGeometry(QRect(xAtpress, (this->pos().y()), event->pos().x(), (this->pos().y())+5));
        this->line->setGeometry(QRect(xAtpress, 13, event->pos().x(), 13));
        //line->setGeometry(this->rect());
        this->line->setFrameShape(QFrame::HLine);
        this->line->setFrameShadow(QFrame::Sunken);
*/

        emit mouseMidButton(0,this->value());
    }
  QSlider::mouseReleaseEvent(event);
}

void MainWindow::on_actionAbout_triggered()
{
    //QMessageBox msgBox(QMessageBox::about, tr("Memory Error"),tr("dataProcessor::scanFinished - wfmPtr = NULL"));
    QMessageBox::about(this, trUtf8("About"), trUtf8("Full Field Pulse Echo Ultrasonic Propogation Imaging System (ver1.0) \n "
                                                     "by Opto-Electro-Structural-Lab KAIST"));
    //msgBox.exec();
    return;
}

void MainWindow::on_actionFrequency_Table_triggered()
{
    QLabel* help=new QLabel();
    help->setWindowTitle("Frequency Thickness Table");
    help->setWindowFlags(Qt::Tool); //or Qt::Tool, Qt::Dialog if you like
    help->setPixmap(QPixmap("://images/Band-pass-filter-range.gif"));
    help->show();
}
