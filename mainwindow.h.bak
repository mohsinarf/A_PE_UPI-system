#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QSerialPortInfo>
#include <QMessageBox>
//#include "aviUtil.h"
#include "structDef.h"
#include "laserController.h"
#include "ldvController.h"
#include "daqControllerS.h"
#include "dataProcessor.h"
#include "plot.h"
#include "spectrogram.h"
#include "stageController.h"
#include "qtextedit.h"

#include "vfw.h"

class MySlider: public QSlider
{
    Q_OBJECT
public:
    int xAtpress;
    QFrame *line;
    MySlider(QWidget *parent = 0);
    void mouseReleaseEvent ( QMouseEvent * event );
    void mousePressEvent ( QMouseEvent * event );

signals:
    void mouseMidButton(bool press,int currentVal); // press == 0 ->released
};

namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

//Combo Box Dbs
QStringList comboScanInterval(QStringList listScanInterval)
{
    listScanInterval.append("0.1");
    listScanInterval.append("0.2");
    listScanInterval.append("0.5");
    listScanInterval.append("1.0");

    return listScanInterval;
}
/***Laser PRF******/
QStringList comboLaserPRF(QStringList listLaserPRF)
{
    listLaserPRF.append("50");
    listLaserPRF.append("100");
    listLaserPRF.append("200");
    listLaserPRF.append("250");
    listLaserPRF.append("300");
    listLaserPRF.append("350");
    listLaserPRF.append("500");
    listLaserPRF.append("600");
    listLaserPRF.append("700");
    listLaserPRF.append("800");
    listLaserPRF.append("1000");
    listLaserPRF.append("1250");
    listLaserPRF.append("2500");

    return listLaserPRF;
}

/*** Laser current ******/
QStringList comboLaserCurrent(QStringList listLaserCurrent)
{
    QString sCurrent;
    for (int i = 0; i < 30; i++)
    {
        float current = 10 + i*0.5;
        sCurrent = QString::number(current);
        listLaserCurrent.append(sCurrent);
    }
    return listLaserCurrent;
}

QStringList comboLdvRange(QStringList listLdvRange)
{
    listLdvRange.append("5");
    listLdvRange.append("10");
    listLdvRange.append("20");
    listLdvRange.append("50");
    listLdvRange.append("200");
    return listLdvRange;
}

QStringList comboDaqCh(QStringList listDaqCh,int SkipChNum)
{
    for (int i = 0;i<=7;i++)
    {
        if (i==SkipChNum) continue;
        listDaqCh.append(QString::number(i));
    }

    return listDaqCh;
}

QStringList comboDaqConfig(QStringList listDaqConfig)
{

    listDaqConfig.append("15");
    listDaqConfig.append("60");

    return listDaqConfig;
}

QStringList comboFilterBandStart(QStringList FilterBandStart)
{
    FilterBandStart.append("50");
    return FilterBandStart;
}

QStringList comboFilterBandStop(QStringList FilterBandStop)
{
    FilterBandStop.append("200");
    return FilterBandStop;
}

QStringList comboPlaySpeed(QStringList PlaySpeed)
{
    PlaySpeed.append("x1");
    PlaySpeed.append("x2");
    PlaySpeed.append("x4");
    PlaySpeed.append("x8");
    PlaySpeed.append("x16");
    PlaySpeed.append("x32");

    return PlaySpeed;
}

QStringList comboMaterials(QStringList list_InspectMaterial)
{
    list_InspectMaterial.append("Aluminum");
    list_InspectMaterial.append("Stainless-steel");
    list_InspectMaterial.append("CFRP");
    list_InspectMaterial.append("GFRP");
    list_InspectMaterial.append("Sandwinch");
    list_InspectMaterial.append("Others");
    return list_InspectMaterial;
}

QStringList comboThickness(QStringList listThickness)
{
    listThickness.append("2 mm");
    listThickness.append("3 mm");
    listThickness.append("4 mm");
    listThickness.append("5 mm");
    listThickness.append("6 mm");
    listThickness.append("Other");
    return listThickness;
}

QStringList comboTotalScans(QStringList listTotalScans)
{
    for (int i = 1;i<=10;i++)
        listTotalScans.append(QString::number(i));

    return listTotalScans;
}

private slots:
    void updateProgressBar_mainwindowSlot(int);

    void endProgressBar_mainwindowSlot();

    void updateStatusBar_mainwindowSlot(QString);

    void on_pushButtonDaqSet_clicked();

    void on_pushButtonLdvAutoFocus_clicked();

    void on_lineEditScanHeight_editingFinished();

    void on_lineEditScanWidth_editingFinished();

    void playPauseResult(bool play);
    void playPauseResultSubband(bool play);

    void incrSlider();
    void incrSliderSubband();

    void on_enumPlaySpeed_currentIndexChanged(int index);

    void scanFinished_main();

    void on_pushButtonProcessFilter_clicked();

    void updateVtwamInputs(bool press, int value);

    void on_pushButtonProcessVtwam_clicked();

    void on_enumPlaySpeedSubband_currentIndexChanged(int index);

    void on_pushButtonSetpos_released();

    void on_pushButtonLaserConfigPrfCurr_clicked();

    void on_pushButtonInit_clicked();

    void on_groupBoxFilterStep2_toggled(bool arg1);

    void on_groupBoxFilterStep1_toggled(bool arg1);

    void on_lineEditXpos_editingFinished();

    void on_lineEditZPos_editingFinished();

    void on_radioButtonSubband1_toggled(bool checked);

    void on_radioButtonSubband2_toggled(bool checked);

    void on_radioButtonSubband3_toggled(bool checked);

    void on_pushButtonLaserControl_toggled(bool checked);
    void Stop();
    void deviceConnect();

    void on_pushButtonLdvAutoFocus_2_clicked();

    void on_pushButtonCapture_clicked();

    void on_actionAbout_triggered();

    void on_actionFrequency_Table_triggered();

    void freqModeChanged_slot(bool);

    void setlabelFrame(int frameNumber);
    void saveSetting(bool defaultFile=false);
    bool loadSetting(bool defaultFile=false);
    void initDoneMsgBox();

    void on_pushButtonQuit_clicked();

private:
    Ui::MainWindow *ui;

    structScan scanInfo;
    dataProcessor *dataProc;

    laserController *laser;

    ldvController *ldv;

    structDaq daqInfo;
    daqController *daq;

    Plot *qwtPlotOsc;
    Plot *qwtPlotResult;
    spectrogram *qwtSpectrogram,*qwtSpectrogram2;
    spectrogram *qwtSpectrogramSubband[NUMOFBANDS];

    structResult resultInfo;

    QTimer *mainTimer,*mainTimerSubband;
    QString progDataPath;
    stageController *stage;
    short sliderIncVal;

    short scansDone;
    bool stopPressed;

    void LoadComboBoxLists();
    void InitSettingPars();
    void laserError();

    void UpdateSettingsStruct();
    void UpdateScanParStruct();
    void UpdateDaqParStruct();
    void updateResultParStruct();
    void setLdvRange();
    int boundScanPars(int enteredPar);

    signals:
    void postProcessingFilteringRequired();
    void postProcessingVtwamRequired();


};

#endif // MAINWINDOW_H
